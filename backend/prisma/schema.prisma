datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Role {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(50)
  created_at DateTime @default(now())
  created_by Int?
  updated_at DateTime @updatedAt
  updated_by Int?

  users      User[]

  @@map("roles")
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?
  created_at  DateTime @default(now())
  created_by  Int?
  updated_at  DateTime @updatedAt
  updated_by  Int?

  users       User[]

  @@map("departments")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(100)
  email         String     @unique @db.VarChar(50)
  password      String     @db.Text
  employee_code String?    @db.VarChar(12)
  department_id Int
  line_user_id  String?    @db.VarChar(50)
  role_id       Int
  lastLogin     DateTime?
  created_at    DateTime   @default(now())
  created_by    Int?
  updated_at    DateTime   @updatedAt
  updated_by    Int?

  role          Role       @relation(fields: [role_id], references: [id])
  department    Department @relation(fields: [department_id], references: [id])
  bookings      Booking[]

  @@map("users")
}




model Fridge {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(100)
  location    String        @db.VarChar(100) // บังคับกรอก
  description String?       @db.Text
  created_at  DateTime      @default(now())
  created_by  Int?
  updated_at  DateTime      @updatedAt
  updated_by  Int?

  shelves     FridgeShelf[]

  @@map("fridges")
}

model FridgeShelf {
  id           Int          @id @default(autoincrement())
  fridge_id    Int
  shelf_number Int
  shelf_name   String       @db.VarChar(100)
  created_at   DateTime     @default(now())
  created_by   Int?
  updated_at   DateTime     @updatedAt
  updated_by   Int?

  fridge       Fridge       @relation(fields: [fridge_id], references: [id])
  slots        FridgeSlot[]

  @@map("fridge_shelves")
}

model FridgeSlot {
  id          Int          @id @default(autoincrement())
  shelf_id    Int
  slot_number Int
  is_disabled Boolean      @default(false) // แทนการมี field status
  created_at  DateTime     @default(now())
  created_by  Int?
  updated_at  DateTime     @updatedAt
  updated_by  Int?

  shelf       FridgeShelf  @relation(fields: [shelf_id], references: [id])
  bookings    Booking[]

  @@map("fridge_slots")
}


model Booking {
  id           Int        @id @default(autoincrement())
  user_id      Int
  slot_id      Int
  start_time   DateTime
  end_time     DateTime

  cancelled_at DateTime?
  cancelled_by Int?
  cancel_reason String?    @db.VarChar(255)

  created_at   DateTime   @default(now())
  created_by   Int?
  updated_at   DateTime   @updatedAt
  updated_by   Int?

  user         User       @relation(fields: [user_id], references: [id])
  slot         FridgeSlot @relation(fields: [slot_id], references: [id])
  items        BookingItem[]
  notifications LineNotification[]

  @@map("bookings")
}

model BookingItem {
  id          Int       @id @default(autoincrement())
  booking_id  Int
  name        String    @db.VarChar(100)
  quantity    Int
  note        String?
  created_at  DateTime  @default(now())
  created_by  Int?
  updated_at  DateTime  @updatedAt
  updated_by  Int?

  booking     Booking   @relation(fields: [booking_id], references: [id])

  @@map("booking_items")
}

model LineNotification {
  id          Int                 @id @default(autoincrement())
  booking_id  Int
  message     String
  status      NotificationStatus
  sent_at     DateTime            @default(now())
  sent_by     Int?

  booking     Booking             @relation(fields: [booking_id], references: [id])

  @@map("line_notifications")
}

enum NotificationStatus {
  success
  failed
}
